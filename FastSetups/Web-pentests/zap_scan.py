#!/usr/bin/env python3
import sys, time, re
from zapv2 import ZAPv2

target = sys.argv[1]
report_html = sys.argv[2]
report_json = sys.argv[3]

zap = ZAPv2(apikey='', proxies={'http': 'http://127.0.0.1:8090', 'https': 'http://127.0.0.1:8090'})

def wait_until_ready():
    for _ in range(60):
        try:
            _ = zap.core.version
            return
        except Exception:
            time.sleep(1)
    raise RuntimeError("ZAP API not ready")

def pct(s):
    try: return int(s)
    except: return 0

wait_until_ready()

zap.core.set_mode('attack')

ctx_name = 'ctx'
try: zap.context.remove_context(ctx_name)
except: pass
zap.context.new_context(ctx_name)

domain = re.sub(r'^https?://', '', target).strip('/')
regex = r'https?://([A-Za-z0-9\-]+\.)*' + re.escape(domain) + r'/.*'
zap.context.include_in_context(ctx_name, regex)

print("[*] Spider…")
sid = zap.spider.scan(target, recurse=True, subtreeOnly=False)
while pct(zap.spider.status(sid)) < 100:
    print("Spider:", zap.spider.status(sid) + "%")
    time.sleep(2)

print("[*] AJAX Spider…")
zap.ajaxSpider.scan(target)
time.sleep(3)
for _ in range(300):
    if zap.ajaxSpider.status != 'running':
        break
    print("AJAX:", zap.ajaxSpider.status)
    time.sleep(3)

print("[*] Active Scan…")
aid = zap.ascan.scan(target, recurse=True, scanpolicyname=None)
while pct(zap.ascan.status(aid)) < 100:
    print("Active:", zap.ascan.status(aid) + "%")
    time.sleep(5)

print("[*] Экспорт отчётов")
with open(report_html, 'w', encoding='utf-8') as f:
    f.write(zap.core.htmlreport())
with open(report_json, 'w', encoding='utf-8') as f:
    f.write(zap.core.jsonreport())

print("[*] Готово.")
