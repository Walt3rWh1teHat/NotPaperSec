#!/bin/bash
# Spider + AJAX Spider + Active Scan (Standard) + Attack Mode + отчёты

set -euo pipefail

if [ -z "${1:-}" ]; then
  echo "Использование: $0 https://example.com"
  exit 1
fi

TARGET="$1"
TS="$(date +%F_%H-%M-%S)"
OUTDIR="zap_results_${TS}"
REPORT_HTML="${OUTDIR}/zap_report_${TS}.html"
REPORT_JSON="${OUTDIR}/zap_report_${TS}.json"
LOGFILE="${OUTDIR}/zap_daemon.log"

mkdir -p "$OUTDIR"

echo "[*] Установка зависимостей…"
sudo apt update -y
sudo apt install -y python3 python3-pip curl wget unzip git default-jre-headless snapd

echo "[*] Установка OWASP ZAP (snap)…"
if ! snap list | grep -q zaproxy; then
  sudo snap install zaproxy --classic
fi

echo "[*] Python клиент zapv2…"
pip3 install --upgrade python-owasp-zap-v2.4 >/dev/null

echo "[*] Старт ZAP в фоне (daemon, 127.0.0.1:8090)…"
/snap/bin/zaproxy -daemon -port 8090 -host 127.0.0.1 -config api.disablekey=true -silent >"$LOGFILE" 2>&1 &

# Ждём готовности API
echo -n "[*] Ожидание готовности API"
for i in {1..60}; do
  if curl -s http://127.0.0.1:8090/JSON/core/view/version/ | grep -q "version"; then
    echo " — OK"
    break
  fi
  echo -n "."
  sleep 1
  if [ "$i" -eq 60 ]; then
    echo " не дождались API"; exit 2
  fi
done

echo "[*] Генерация python-скрипта сканирования…"
cat > "${OUTDIR}/zap_scan.py" << 'EOF'
#!/usr/bin/env python3
import sys, time, re
from zapv2 import ZAPv2

target = sys.argv[1]
report_html = sys.argv[2]
report_json = sys.argv[3]

zap = ZAPv2(apikey='', proxies={'http': 'http://127.0.0.1:8090', 'https': 'http://127.0.0.1:8090'})

def wait_until_ready():
    for _ in range(60):
        try:
            _ = zap.core.version
            return
        except Exception:
            time.sleep(1)
    raise RuntimeError("ZAP API not ready")

def pct(s):
    try: return int(s)
    except: return 0

wait_until_ready()

# Режим "ATTACK" — ZAP будет активно атаковать новые узлы в скоупе
zap.core.set_mode('attack')


ctx_name = 'ctx'
try:
    zap.context.remove_context(ctx_name)
except:
    pass
zap.context.new_context(ctx_name)
# Универсальный regex: протокол http/https, поддомены и все пути
domain = re.sub(r'^https?://', '', target).strip('/')
regex = r'https?://([A-Za-z0-9\-]+\.)*' + re.escape(domain) + r'/.*'
zap.context.include_in_context(ctx_name, regex)

# Немного "бережных" настроек, чтобы VPS не проседал
try:
    zap.ascan.set_option_max_threads_per_host(2)
    zap.ascan.set_option_max_scans_in_ui(1)
    zap.spider.set_option_max_children(40)
except:
    pass

print("[*] Старт классического Spider…")
sid = zap.spider.scan(target, recurse=True, subtreeOnly=False)
while pct(zap.spider.status(sid)) < 100:
    print("  Spider:", zap.spider.status(sid) + "%")
    time.sleep(2)

print("[*] Старт AJAX Spider (для JS-сайтов)…")
zap.ajaxSpider.scan(target)
time.sleep(3)

for _ in range(300):
    st = zap.ajaxSpider.status
    print("  AJAX:", st)
    if st != 'running':
        break
    time.sleep(3)

print("[*] Active Scan (Standard)…")
aid = zap.ascan.scan(target, recurse=True, scanpolicyname=None)
while pct(zap.ascan.status(aid)) < 100:
    print("  Active:", zap.ascan.status(aid) + "%")
    time.sleep(5)

print("[*] Экспорт HTML отчёта…")
with open(report_html, 'w', encoding='utf-8') as f:
    f.write(zap.core.htmlreport())

print("[*] Экспорт JSON отчёта…")
with open(report_json, 'w', encoding='utf-8') as f:
    f.write(zap.core.jsonreport())

print("[*] Готово. HTML:", report_html, "JSON:", report_json)
EOF

chmod +x "${OUTDIR}/zap_scan.py"

echo "[*] Запуск сканирования для ${TARGET}…"
python3 "${OUTDIR}/zap_scan.py" "${TARGET}" "${REPORT_HTML}" "${REPORT_JSON}"

echo "[*] Аккуратное завершение ZAP…"
curl -s "http://127.0.0.1:8090/JSON/core/action/shutdown/?apikey=" >/dev/null || true

echo
echo "[*] Готово!"
echo "    HTML отчёт: ${REPORT_HTML}"
echo "    JSON отчёт: ${REPORT_JSON}"
echo "    Логи ZAP:   ${LOGFILE}"
